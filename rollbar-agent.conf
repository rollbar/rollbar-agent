[DEFAULT]
# global option - where the state is kept.
statefile = /var/cache/rollbar-agent.state

# state protocol version (based on pickle protocols)
#
# defaults to 0 for backward compatibility with state files generated by Python2
# note that for different versions of Python3 use different default values,
# however you don't need to change the default 0
state_proto = 0

# target time how long to sleep between runs (in seconds). will never be longer than this.
sleep_time = 10

timeout = 3

# if not empty, files found in directories will only be used if they have one of these extensions
# (explicitly listed files will still be used)
# separate by spaces
ext_whitelist = log ratchet rollbar

# never examine files with these extensions found in directories
# separate by spaces
ext_blacklist = gz

[app:myapp]
# rollbar project access token
params.access_token = 32characterstring 
# environment name - any string up to 255 chars is fine.
# Use 'production' for your production environment.
params.environment = production
# code root
params.root = /path/to/code/root
# current branch
params.branch = master
# code language
#params.language = python
# code framework
#params.framework = pyramid

# files or directories (non-recursive) to process
# separate by whitespace
targets = /path/to/log/dir1
    /path/to/log/dir2
    /path/to/log/dir3

# Default is to leave files around after they've been processed; set this to true to have the agent
# delete a file once the agent has processed it
delete_processed_files = false

# default log format name. references a format: section below
log_format.default = pyramid
# log formats for filename patterns (unix glob patterns). 
# syntax: one declaration per line, space-separated, 
# regex followed by format name
# each line MUST have at least 1 leading white space character
log_format.patterns = 
    celery*.log celery_process

# files to skip (absolute paths)
# separate by whitespace
blacklist =

# don't send any events below this log level
min_log_level = INFO

# regex patterns that will match strings to be replaced with asterisks
# syntax: one regex pattern per line
# each line MUST have at least 1 leading white space character
scrub_regex_patterns = 

# Uncomment the following line if your log file contains terminal control sequences for color
# or boldness.  This will filter that data, making format matching easier and ensuring the rollbar
# logging is intelligible.
# filter_chr_attr_sequences = true

### log format library. 
# add your own with sections named like [format:namegoeshere]
# reference in target_log_format.* keys in [app:*] sections above

[format:pyramid]
# log format string type. currently, only "python" is supported.
type = python
# log format string specification
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s
# custom date format, for the %(asctime)s part. defaults to %Y-%m-%d %H:%M:%S,%f
datefmt = %Y-%m-%d %H:%M:%S,%f

[format:celery_process]
type = python
format = [%(asctime)s: %(levelname)s/%(processName)s] %(message)s

[format:celery_default]
type = python
format = [%(asctime)s: %(levelname)s] %(message)s

[format:celery_task]
type = python
format = [%(asctime)s: %(levelname)s/%(processName)s] %(message)s
